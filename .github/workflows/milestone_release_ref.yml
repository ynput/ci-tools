name: Milestone release [ref]

on:
  workflow_dispatch:
    inputs:
      milestone:
        required: true
      repo-owner:
        required: true
      repo-name:
        required: true
      version-py-path:
        required: true
      pyproject-path:
        required: true

  workflow_call:
    inputs:
      milestone:
        required: true
        type: string
      repo-owner:
        required: true
        type: string
      repo-name:
        required: true
        type: string
      version-py-path:
        required: true
        type: string
      pyproject-path:
        required: true
        type: string
    secrets:
      token:
        required: true
      user_email:
        required: true
      user_name:
        required: true
      cu_api_key:
        required: true
      cu_team_id:
        required: true
      cu_field_id:
        required: true

jobs:
  generate-milestone-changelog:
    runs-on: ubuntu-latest
    env:
      ci-tools-workdir: /home/runner/work/ci-tools
      base-branch: "develop"
    steps:
      #----------------------------------------------
      # switch between secret inputs
      #----------------------------------------------
      - name: Set secret switch
        uses: haya14busa/action-cond@v1
        id: secretToken
        with:
          cond: ${{ secrets.token != '' }}
          if_true: ${{ secrets.token }}
          if_false: ${{ secrets.YNPUT_BOT_TOKEN }}

      #----------------------------------------------
      # set environment for github token and repo
      #----------------------------------------------
      - name: Set Environment vars
        run: |
          echo "GITHUB_TOKEN=${{ steps.secretToken.outputs.value }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_OWNER=${{ inputs.repo-owner }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_NAME=${{ inputs.repo-name }}" >> $GITHUB_ENV
          echo "CLICKUP_API_KEY=${{secrets.cu_api_key}}" >> $GITHUB_ENV
          echo "CLICKUP_RELEASE_FIELD_ID=${{secrets.cu_field_id}}" >> $GITHUB_ENV
          echo "CLICKUP_TEAM_ID=${{secrets.cu_team_id}}" >> $GITHUB_ENV

      #----------------------------------------------
      #      check out to ci tools repo
      #----------------------------------------------
      - name: Checkout CI Tools repo
        uses: actions/checkout@v3
        with:
          repository: ynput/ci-tools
          ref: main
          path: ./ci-tools

      #----------------------------------------------
      # set-up python
      #----------------------------------------------
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      #----------------------------------------------
      # move ci tools cloned files to different folder
      #----------------------------------------------
      - name: Move CI Tools work dir content
        run: |
          mv ${{ github.workspace }}/ci-tools ${{ env.ci-tools-workdir }}
          cd "${{ env.ci-tools-workdir }}"
          ls -l

      #----------------------------------------------
      # install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry --directory=${{ env.ci-tools-workdir }} install --no-interaction

      #----------------------------------------------
      # check if a commit is added to input milestone
      #----------------------------------------------
      - name: Get milestone commit
        id: milestoneCommit
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          COMMIT=$(python ${{ env.ci-tools-workdir }}/tools/cli.py milestones get-milestone-commit --milestone=${{ inputs.milestone }})
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
        shell: bash

      #----------------------------------------------
      # get latest commit found on develop branch
      #----------------------------------------------
      - name: Get base branch commit
        id: baseBranchCommit
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          COMMIT=$(python ${{ env.ci-tools-workdir }}/tools/cli.py repo get-latest-commit --branch=${{ env.base-branch }})
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
        shell: bash

      #----------------------------------------------
      # inject commit into milestone if there is none
      #----------------------------------------------
      - name: 💉 Inject commit into milestone
        id: milestoneCommitInject
        if: steps.milestoneCommit.outputs.commit == ''
        run: |
            source ${{ env.ci-tools-workdir }}/.venv/bin/activate
            python ${{ env.ci-tools-workdir }}/tools/cli.py milestones set-milestone-commit --milestone=${{ inputs.milestone }} --commit-sha=${{ steps.baseBranchCommit.outputs.commit }}

      #----------------------------------------------
      # merge base branch (develop) to main
      #    only if not commit in milestone
      #----------------------------------------------
      - name: 🔨 Merge develop to main
        if: steps.milestoneCommit.outputs.commit == ''
        uses: everlytic/branch-merge@1.1.0
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          source_ref: ${{ env.base-branch }}
          target_branch: 'main'
          commit_message_template: '[Automated] Merged {source_ref} into {target_branch}'

       #----------------------------------------------
      #      check out to ci tools repo
      #----------------------------------------------
      - name: Checkout Workspace repo to main
        uses: actions/checkout@v3
        with:
          ref: main
      #----------------------------------------------
      # get next available version from tags if
      # if milestone title still `next-` and not version
      #----------------------------------------------
      - name: Get next version from tags
        if: ${{ startsWith(inputs.milestone, 'next-') }}
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          NEXT_VERSION=$(python ${{ env.ci-tools-workdir }}/tools/cli.py versioning bump-version --type=release --part=patch)
          CURRENT_VERSION=$(python ${{ env.ci-tools-workdir }}/tools/cli.py versioning current-version --type=release)
          python ${{ env.ci-tools-workdir }}/tools/cli.py milestones set-milestone-tag --milestone=${{ inputs.milestone }} --tag-name=${CURRENT_VERSION}
          python ${{ env.ci-tools-workdir }}/tools/cli.py milestones set-milestone-title --milestone=${{ inputs.milestone }} --new-title=${NEXT_VERSION}

          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
        shell: bash
      #----------------------------------------------
      # get version number from milestone title
      # if not `next-` in name of input milestone
      #----------------------------------------------
      - name: Get next version from milestone title
        if: ${{ !startsWith(inputs.milestone, 'next-') }}
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate

          CURRENT_VERSION=$(python ${{ env.ci-tools-workdir }}/tools/cli.py milestones get-milestone-tag --milestone=${{ inputs.milestone }})
          echo "NEXT_VERSION=${{ inputs.milestone }}" >> $GITHUB_ENV
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
        shell: bash

      #----------------------------------------------
      # generate change log and add it to milestone, bump versions
      #----------------------------------------------
      - name: Changelog generate & assign to milestone description
        id: changelog
        run : |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate

          changelog_temp_file=$(python ${{ env.ci-tools-workdir }}/tools/cli.py changelog generate-milestone-changelog --milestone=${{ env.NEXT_VERSION }} --old-tag=${{ env.CURRENT_VERSION }} --new-tag=${{ env.NEXT_VERSION }})
          updated_changelog=$(python ${{ env.ci-tools-workdir }}/tools/cli.py changelog add-to-changelog-file --old-changelog-path=./CHANGELOG.md  --new-changelog-path=${changelog_temp_file} --tag=${{ env.NEXT_VERSION }})
          python ${{ env.ci-tools-workdir }}/tools/cli.py versioning bump-file-version --version=${{ env.NEXT_VERSION }} --version-path=${{ inputs.version-py-path }} --pyproject-path=${{ inputs.pyproject-path }}

          delimiter=$(openssl rand -hex 8)
          {
              echo "string<<$delimiter"
              sed -e '$a\' $changelog_temp_file
              echo "$delimiter"
          } >> "$GITHUB_OUTPUT"
          echo "updated=${updated_changelog}" >> $GITHUB_OUTPUT

        shell: bash
      #----------------------------------------------
      # Set Release Version custom attribute to ClickUp project
      #----------------------------------------------
      - name: Set Release version to ClickUp tasks
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          python ${{ env.ci-tools-workdir }}/tools/cli.py project prs-to-clickup --milestone=${{ env.NEXT_VERSION }}
        shell: bash
      #----------------------------------------------
      # Test printing
      #----------------------------------------------
      - name: Test print the change log result
        run: |
          echo "current_version: ${{ env.CURRENT_VERSION }}"
          echo "next_version: ${{ env.NEXT_VERSION }}"
          echo "milestoneCommit: ${{ steps.milestoneCommit.outputs.commit }}"
          echo "baseBranchCommit: ${{ steps.baseBranchCommit.outputs.commit }}"
          echo "user.email: ${{ secrets.user_email }}"
          echo "user.name: ${{ secrets.user_name }}"
          echo "updated: ${{ steps.changelog.outputs.updated }}"

      - name: 💾 Commit and Tag
        if: ${{ steps.changelog.outputs.updated }}
        id: gitCommit
        run: |
          git config user.email ${{ secrets.user_email }}
          git config user.name ${{ secrets.user_name }}
          git add .
          git commit -m "[Automated] Release"
          tag_name="${{ env.NEXT_VERSION }}"
          git tag -a $tag_name -m "stable release"

      - name: 🔏 Push to protected main branch
        if: ${{ steps.changelog.outputs.updated }}
        uses: CasperWA/push-protected@v2.10.0
        with:
          token: ${{ env.GITHUB_TOKEN }}
          branch: main
          tags: true
          unprotect_reviews: true

      - name: 🔁 Merge main back to develop
        if: ${{ steps.changelog.outputs.updated }}
        uses: everlytic/branch-merge@1.1.0
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          source_ref: 'main'
          target_branch: 'develop'
          commit_message_template: '[Automated] Merged release {source_ref} into {target_branch}'

      # ----------------------------------------------
      # make tag release
      # ---------------------------------------------
      - name: 🚀 Github Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.NEXT_VERSION }}
          body: ${{ steps.changelog.outputs.string }}
          token: ${{ env.GITHUB_TOKEN }}
