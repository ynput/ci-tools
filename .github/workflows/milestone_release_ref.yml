name: Milestone release [ref]

on:
  workflow_dispatch:
    inputs:
      milestone:
        required: true
      repo-owner:
        required: true
      repo-name:
        required: true
  workflow_call:
    inputs:
      milestone:
        required: true
        type: string
      repo-owner:
        required: true
        type: string
      repo-name:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  generate-milestone-changelog:
    runs-on: ubuntu-latest
    env:
      ci-tools-workdir: ${{ github.workspace }}/ci-tools
      base-branch: "develop"
    steps:
      #----------------------------------------------
      #      switch between secret inputs
      #----------------------------------------------
      - name: Set secret switch
        uses: haya14busa/action-cond@v1
        id: secretToken
        with:
          cond: ${{ secrets.token != '' }}
          if_true: ${{ secrets.token }}
          if_false: ${{ secrets.YNPUT_BOT_TOKEN }}
      - name: Set Environment vars
        run: |
          echo "GITHUB_TOKEN=${{ steps.secretToken.outputs.value }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_OWNER=${{ inputs.repo-owner }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_NAME=${{ inputs.repo-name }}" >> $GITHUB_ENV
      #----------------------------------------------
      #      check out to ci tools repo
      #----------------------------------------------
      - name: Checkout CI Tools repo
        uses: actions/checkout@v3
        with:
          repository: ynput/ci-tools
          ref: main
          path: ./ci-tools

      #----------------------------------------------
      #      set-up python
      #----------------------------------------------
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Test CI Tools work dir content
        run: |
          cd "${{ env.ci-tools-workdir }}"
          ls -l

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry --directory=${{ env.ci-tools-workdir }} install --no-interaction
      #----------------------------------------------
      # Check if a commit is added to input milestone
      #----------------------------------------------
      - name: Get milestone commit
        id: milestoneCommit
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          COMMIT=$(python ${{ env.ci-tools-workdir }}/tools/cli.py milestones get-milestone-commit --milestone=${{ inputs.milestone }})
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
        shell: bash
      #----------------------------------------------
      # Get latest commit found on develop branch
      #----------------------------------------------
      - name: Get base branch commit
        id: baseBranchCommit
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          COMMIT=$(python ${{ env.ci-tools-workdir }}/tools/cli.py repo get-latest-commit --branch=${{ env.base-branch }})
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
        shell: bash

      - name: ðŸ’‰ Inject commit into milestone
        id: milestoneCommitInject
        if: steps.milestoneCommit.outputs.commit == ''
        run: |
            source ${{ env.ci-tools-workdir }}/.venv/bin/activate
            python ${{ env.ci-tools-workdir }}/tools/cli.py milestones set-milestone-commit --milestone=${{ inputs.milestone }} --commit-sha=${{ steps.baseBranchCommit.outputs.commit }}

      - name: Get next version from tags
        if: |
          inputs.milestone == 'next-patch'
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          NEXT_VERSION=$(python ${{ env.ci-tools-workdir }}/tools/cli.py versioning bump-version --type=release --part=patch)
          python ${{ env.ci-tools-workdir }}/tools/cli.py milestones set-milestone-title --milestone=${{ inputs.milestone }} --new-title=${NEXT_VERSION}

          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
        shell: bash

      - name: Get next version from milestone title
        if: |
          inputs.milestone != 'next-patch'
        run: |
          echo "NEXT_VERSION=${{ inputs.milestone }}" >> $GITHUB_ENV
        shell: bash

      #----------------------------------------------
      #              run changelog generator
      #----------------------------------------------
      - name: Changelog generate & assign to milestone description
        id: changelog
        run : |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate

          changelog_temp_file=$(python ${{ env.ci-tools-workdir }}/tools/cli.py changelog generate-milestone-changelog --milestone=${{ env.NEXT_VERSION }})
          python ${{ env.ci-tools-workdir }}/tools/cli.py milestones set-milestone-changelog --milestone=${{ env.NEXT_VERSION }} --changelog-path=${changelog_temp_file}

          delimiter=$(openssl rand -hex 8)
          {
              echo "string<<$delimiter"
              sed -e '$a\' $changelog_temp_file
              echo "$delimiter"
          } >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Test print the change log result
        run: |
          echo "changelog: ${{ steps.changelog.outputs.string }}"
          echo "next_version: ${{ env.NEXT_VERSION }}"
          echo "milestoneCommit: ${{ steps.milestoneCommit.outputs.commit }}"
          echo "baseBranchCommit: ${{ steps.baseBranchCommit.outputs.commit }}"
