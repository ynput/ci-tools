name: Milestone release [ref]

on:
  workflow_dispatch:
    inputs:
      milestone:
        required: true
      repo-owner:
        required: true
      repo-name:
        required: true
      version-py-path:
        required: true
      pyproject-path:
        required: true

  workflow_call:
    inputs:
      milestone:
        required: true
        type: string
      repo-owner:
        required: true
        type: string
      repo-name:
        required: true
        type: string
      version-py-path:
        required: true
        type: string
      pyproject-path:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  generate-milestone-changelog:
    runs-on: ubuntu-latest
    env:
      ci-tools-workdir: /home/runner/work/ci-tools
      base-branch: "develop"
    steps:
      #----------------------------------------------
      # switch between secret inputs
      #----------------------------------------------
      - name: Set secret switch
        uses: haya14busa/action-cond@v1
        id: secretToken
        with:
          cond: ${{ secrets.token != '' }}
          if_true: ${{ secrets.token }}
          if_false: ${{ secrets.YNPUT_BOT_TOKEN }}

      #----------------------------------------------
      # set environment for github token and repo
      #----------------------------------------------
      - name: Set Environment vars
        run: |
          echo "GITHUB_TOKEN=${{ steps.secretToken.outputs.value }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_OWNER=${{ inputs.repo-owner }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_NAME=${{ inputs.repo-name }}" >> $GITHUB_ENV

      #----------------------------------------------
      #      check out to ci tools repo
      #----------------------------------------------
      - name: Checkout CI Tools repo
        uses: actions/checkout@v3
        with:
          repository: ynput/ci-tools
          ref: main
          path: ./ci-tools
        run: mv ${{ github.workspace }}/ci-tools ${{ env.ci-tools-workdir }}
      #----------------------------------------------
      # set-up python
      #----------------------------------------------
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Test CI Tools work dir content
        run: |
          cd "${{ env.ci-tools-workdir }}"
          ls -l

      #----------------------------------------------
      # install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry --directory=${{ env.ci-tools-workdir }} install --no-interaction

      #----------------------------------------------
      # check if a commit is added to input milestone
      #----------------------------------------------
      - name: Get milestone commit
        id: milestoneCommit
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          COMMIT=$(python ${{ env.ci-tools-workdir }}/tools/cli.py milestones get-milestone-commit --milestone=${{ inputs.milestone }})
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
        shell: bash

      #----------------------------------------------
      # get latest commit found on develop branch
      #----------------------------------------------
      - name: Get base branch commit
        id: baseBranchCommit
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          COMMIT=$(python ${{ env.ci-tools-workdir }}/tools/cli.py repo get-latest-commit --branch=${{ env.base-branch }})
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
        shell: bash

      #----------------------------------------------
      # inject commit into milestone if there is none
      #----------------------------------------------
      - name: üíâ Inject commit into milestone
        id: milestoneCommitInject
        if: steps.milestoneCommit.outputs.commit == ''
        run: |
            source ${{ env.ci-tools-workdir }}/.venv/bin/activate
            python ${{ env.ci-tools-workdir }}/tools/cli.py milestones set-milestone-commit --milestone=${{ inputs.milestone }} --commit-sha=${{ steps.baseBranchCommit.outputs.commit }}

      #----------------------------------------------
      #      check out to ci tools repo
      #----------------------------------------------
      - name: Checkout Workspace repo to commit
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.baseBranchCommit.outputs.commit }}

      #----------------------------------------------
      # get next available version from tags if
      # if milestone title still `next-` and not version
      #----------------------------------------------
      - name: Get next version from tags
        if: startsWith(${{ inputs.milestone }}, 'next-') == true
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          NEXT_VERSION=$(python ${{ env.ci-tools-workdir }}/tools/cli.py versioning bump-version --type=release --part=patch)
          CURRENT_VERSION=$(python ${{ env.ci-tools-workdir }}/tools/cli.py versioning current-version --type=release)
          python ${{ env.ci-tools-workdir }}/tools/cli.py milestones set-milestone-title --milestone=${{ inputs.milestone }} --new-title=${NEXT_VERSION}
          python ${{ env.ci-tools-workdir }}/tools/cli.py milestones set-milestone-commit --milestone=${{ inputs.milestone }} --tag-name=${CURRENT_VERSION}

          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
        shell: bash

      #----------------------------------------------
      # get version number from milestone title
      # if not `next-` in name of input milestone
      #----------------------------------------------
      - name: Get next version from milestone title
        if: startsWith(${{ inputs.milestone }}, 'next-') == false
        run: |
          CURRENT_VERSION=$(python ${{ env.ci-tools-workdir }}/tools/cli.py milestones get-milestone-tag --milestone=${{ inputs.milestone }})
          echo "NEXT_VERSION=${{ inputs.milestone }}" >> $GITHUB_ENV
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
        shell: bash

      #----------------------------------------------
      # generate change log and add it to milestone, bump versions
      #----------------------------------------------
      - name: Changelog generate & assign to milestone description
        id: changelog
        run : |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate

          changelog_temp_file=$(python ${{ env.ci-tools-workdir }}/tools/cli.py changelog generate-milestone-changelog --milestone=${{ env.NEXT_VERSION }})
          python ${{ env.ci-tools-workdir }}/tools/cli.py milestones set-milestone-changelog --milestone=${{ env.NEXT_VERSION }} --changelog-path=${changelog_temp_file}
          python ${{ env.ci-tools-workdir }}/tools/cli.py changelog add-to-changelog-file --old-changelog-path=./CHANGELOG.md  --new-changelog-path=${changelog_temp_file} --old-tag=${{ env.CURRENT_VERSION }} --new-tag=${{ env.NEXT_VERSION }}
          python ${{ env.ci-tools-workdir }}/tools/cli.py versioning bump-file-version --version=${{ env.NEXT_VERSION }} --version-path=${{ inputs.version-py-path }} --pyproject-path=${{ inputs.pyproject-path }}

          delimiter=$(openssl rand -hex 8)
          {
              echo "string<<$delimiter"
              sed -e '$a\' $changelog_temp_file
              echo "$delimiter"
          } >> "$GITHUB_OUTPUT"

        shell: bash

      - name: Test print the change log result
        run: |
          echo "changelog: ${{ steps.changelog.outputs.string }}"
          echo "current_version: ${{ env.CURRENT_VERSION }}"
          echo "next_version: ${{ env.NEXT_VERSION }}"
          echo "milestoneCommit: ${{ steps.milestoneCommit.outputs.commit }}"
          echo "baseBranchCommit: ${{ steps.baseBranchCommit.outputs.commit }}"

      - name: üíæ Commit and Tag
        id: git_commit
        run: |
          git config user.email ${{ secrets.CI_EMAIL }}
          git config user.name ${{ secrets.CI_USER }}
          git add .
          git commit -m "[Automated] Release"
          tag_name="${{ env.NEXT_VERSION }}"
          git tag -a $tag_name -m "stable release"

      - name: üîè Push to protected main branch
        uses: CasperWA/push-protected@v2.10.0
        with:
          token: ${{ env.GITHUB_TOKEN }}
          branch: main
          tags: true
          unprotect_reviews: true

      - name: üîÅ Merge main back to develop
        uses: everlytic/branch-merge@1.1.0
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          source_ref: 'main'
          target_branch: 'develop'
          commit_message_template: '[Automated] Merged release {source_ref} into {target_branch}'