name: Milestone release [ref]

on:
  workflow_dispatch:
    inputs:
      milestone:
        required: true
      repo-owner:
        required: true
      repo-name:
        required: true
  workflow_call:
    inputs:
      milestone:
        required: true
        type: string
      repo-owner:
        required: true
        type: string
      repo-name:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  generate-milestone-changelog:
    runs-on: ubuntu-latest
    env:
      ci-tools-workdir: ${{ github.workspace }}/ci-tools
      base-branch: "develop"
    steps:
      #----------------------------------------------
      #      switch between secret inputs
      #----------------------------------------------
      - name: Set secret switch
        uses: haya14busa/action-cond@v1
        id: secretToken
        with:
          cond: ${{ secrets.token != '' }}
          if_true: ${{ secrets.token }}
          if_false: ${{ secrets.YNPUT_BOT_TOKEN }}

      #----------------------------------------------
      #      check out to ci tools repo
      #----------------------------------------------
      - name: Checkout CI Tools repo
        uses: actions/checkout@v3
        with:
          repository: ynput/ci-tools
          ref: main
          path: ./ci-tools

      #----------------------------------------------
      #      set-up python
      #----------------------------------------------
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Test CI Tools work dir content
        run: |
          cd "${{ env.ci-tools-workdir }}"
          ls -l

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry --directory=${{ env.ci-tools-workdir }} install --no-interaction
      #----------------------------------------------
      # Check if a commit is added to input milestone
      #----------------------------------------------
      - name: Get milestone commit
        id: milestoneCommit
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          COMMIT=$(python ${{ env.ci-tools-workdir }}/tools/cli.py milestones get-milestone-commit --milestone=${{ inputs.milestone }})
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
        shell: bash
        env:
          GITHUB_TOKEN: "${{ steps.secretToken.outputs.value }}"
          GITHUB_REPOSITORY_OWNER: ${{ inputs.repo-owner }}
          GITHUB_REPOSITORY_NAME: ${{ inputs.repo-name }}
      #----------------------------------------------
      # Get latest commit found on develop branch
      #----------------------------------------------
      - name: Get base branch commit
        id: baseBranchCommit
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          COMMIT=$(python ${{ env.ci-tools-workdir }}/tools/cli.py repo get-latest-commit --branch=${{ env.base-branch }})
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
        shell: bash
        env:
          GITHUB_TOKEN: "${{ steps.secretToken.outputs.value }}"
          GITHUB_REPOSITORY_OWNER: ${{ inputs.repo-owner }}
          GITHUB_REPOSITORY_NAME: ${{ inputs.repo-name }}
      # PYTHON milestone.py (step)
      # is milestone `next-patch` or `next-minor`
      #    if true:
      #     - get latest semver from tags (path/minor)
      #     - rename milestone (if not pre-release)
      - name: Get Version name
        id: version
        run: |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          NEXT_VERSION=$(python ${{ env.ci-tools-workdir }}/tools/cli.py versioning bump-version --type=release --part=patch)
          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
        shell: bash
        env:
          GITHUB_TOKEN: "${{ steps.secretToken.outputs.value }}"
          GITHUB_REPOSITORY_OWNER: ${{ inputs.repo-owner }}
          GITHUB_REPOSITORY_NAME: ${{ inputs.repo-name }}
      # is commit hash attribute in milestone description
      #     if false:
      #     - checkout to main (owner/name) (step)
      #     - merge latest develop to main (step)
      #     - get hash from latest main commit (bash git)
      #     - set to milestone description (python)
      #     - set DueDate to milestone (python)
      #     if true:
      #     - get hash (python)
      #     - checkout to the hash (owner/name) (step)

      #----------------------------------------------
      #              run changelog generator
      #----------------------------------------------
      - name: Run changelog generator
        id: changelog
        run : |
          source ${{ env.ci-tools-workdir }}/.venv/bin/activate
          delimiter=$(openssl rand -hex 8)
          {
              echo "string<<$delimiter"
              sed -e '$a\' $(python ${{ env.ci-tools-workdir }}/tools/cli.py changelog generate-milestone-changelog --milestone=${{ inputs.milestone }})
              echo "$delimiter"
          } >> "$GITHUB_OUTPUT"
        shell: bash
        env:
          GITHUB_TOKEN: "${{ steps.secretToken.outputs.value }}"
          GITHUB_REPOSITORY_OWNER: ${{ inputs.repo-owner }}
          GITHUB_REPOSITORY_NAME: ${{ inputs.repo-name }}

      - name: Test print the change log result
        run: |
          echo "changelog: ${ steps.changelog.outputs.string }"
          echo "next_version: ${ steps.version.outputs.next_version }"
          echo "milestoneCommit: ${ steps.milestoneCommit.outputs.commit }"
          echo "baseBranchCommit: ${ steps.baseBranchCommit.outputs.commit }"
