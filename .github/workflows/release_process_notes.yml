release process:
- make sure only user `pypebot` is doing this
- check out repo with depth 0
- setting up python environment
- injecting new version into version.py and pyproject.toml
  - get current version and set it to step outputs
  -
- generating changelog


MILESTONE RELEASE [patch]:
trigger:
  - user closes milestone
  - manual workflow_dispatch with input
    inputs: [Release, Prerelease], milestone(optional)

steps:
  - set secret input switch
  - install python and dependencies
  - if `next-path` in milestone:
    - checkout to repo owner/name (from inputs)
    - get latest_patch_version
    - edit versions in pyproject.toml and version.py
    - milestone title is renamed to latest_patch_version
    - milestone Due date is updated to current date
    - commit Tag
    - push to protected branch
    :else: milestone Title is latest_patch_version

  - checkout to commit hash
  - changelog is generated from milestone
  - milestone Description is filled with changelog
  - changelong is added to CHANGELONG.md
  - Github release
  - merge main back to develop
